# Imagine you are building some sort of service that will be called by up to 1000 client applications
# to get simple end-of-day stock price information (open, close, high, low). You may assume that you
# already have the data, and you can store it in any format you wish. How would you design the
# client-facing service which provides the information to client applications? You are responsible 
# for the development, rollout, and ongoing monitoring and maintenance of the feed. Describe the
# different methods you considered and why you would recommend your approach. Your service can use
# any technologies you wish, and can distribute the information to the client applications in any
# mechanism you choose.

# Ease of maintenance
# Portability - It should have a good API that can serve many different clients easily
# Scale easily, to serve many clients

# I would probably choose something in the lines of a JSON server, such as MongoDB. It is really
# easy to use JSON, many languanges support it very well. Also, MongoDB can handle complex queries,
# which may be a good feature for clients, not to mention database features that comes with it,
# such as backup of data, possibility of rolling back in time and security.
# However, if using a full-fledged database is an overkill, a simple REST/JSON API could do it, where
# we can use a simple JSON file that can be generated by a script.

# Other options: Relational database, XML, CSV or txt file.